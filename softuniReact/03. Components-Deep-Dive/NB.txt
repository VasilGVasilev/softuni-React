About Keys and Lists
    React vDOM is optimises the DOM very efficiently and if
    we attach <li>s to a <ul> using a for loop, when vDOM transfer
    info to DOM, it will lose this capability of specific update,
    no entire re-render.
    That is why we use keys that React uses to map elements/nodes onto
    the vDOM and if necessary update just the specific <li> via its
    specific key.

    
    React understands arrays, even if we did not have <li>s, React will understand 
    the array made via .map() and render it as a list

    each key is has to be unique but just in comparison to other siblings in list


catch undefined
    // useState(props.start || 0) to catch if props is undefined
typical toggle
    // setHighlighted(state => !state)


useEffect():
    How long the component is attached to the DOM:
        in class -> lifecycle methods
        in function -> hooks: useEffect()

    Example: when we have to render a component, we want the data that comes via this
        component's useEffect() to be rendered within that very component

2:44:50

useEffect():
    see my-demos/useEffect
    useEffect(setup, dependencies?)
    the hook has:
        setup, a function that is executed
        dependencies, an array that show which dependencies are to be executed
            there are three cases:

            - no dependency -> useEffect executes each render:
                useEffect(()=>{
                    console.log('render')
                })

            - empty dependency -> useEffect executes once on initial render, so to speak it mounts:
                useEffect(()=>{
                    console.log('render')
                }, [])

            - specific dependency -> useEffect executes at each change of state of the specified dependency:
                useEffect(()=>{
                    console.log('render')
                })
    USE CASE:

        the last use case is prevalent, because, by setting an array after callback function,
        we MOUNT useEffect() and it then 'watches' for changes of state of the listed states/dependencies

    React Beta definition:
        useEffect(setup, dependencies?)
            - setup: The function with your Effect’s logic. When your component is first added to the DOM, React will run your setup function.
            - dependencies: The list of all reactive values referenced inside of the setup code. Reactive values include props, state, and all 
            the variables and functions declared directly inside your component body.If you don’t specify the dependencies at all, your Effect will re-run after every re-render of the component.