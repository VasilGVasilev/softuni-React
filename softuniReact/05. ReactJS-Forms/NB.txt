There are two types of forms - uncontrolled and controlled:

    Uncontrolled 
        (DOM controlls state)
        uncontrolled forms are the standard HTML forms that React does not controlled
        What does React not control tho?
        The state:
                    uncontrolled forms have a state (CONTROLLED BY browser DOM TREE), because when you write info into input field
                    this info is stored somewhere(in this DOM form element) which you can access
                    via const formData = new FormData(e.target) -> BUT this is not React handling, it is DOM manipulation via Event
                    with other words, state is the current value stored in the DOM inputElement Object

                    function App() {
                        const submitHandler = (e) => {
                            e.preventDefault();
                            
                            const formData = new FormData(e.currentTarget);
                            const username = formData.get('username')
                        }
                        return (
                            <div className="App">
                                <header className="App-header">
                                    <form onSubmit={submitHandler}>
                                        <div>
                                            <label htmlFor="username">Username:</label>
                                            <input id="username" type="text" name="username" />
                                        </div>
                                        <div>
                                            <label htmlFor="password">Password:</label>
                                            <input id="password" type="password" name="password" />
                                        </div>
                                        <div>
                                            <input type="submit" value="Login" />
                                        </div>
                                    </form>
                                </header>
                            </div>
                        );
                    }
        
    Controlled
        (React controlls state)
            Basically, 
                React attaches a mechanism that keeps track of changes in the browser DOm (change event watching every keystroke)
                creates its own state in its component 
                uses special value tag to signify that the changes in the input field are controlled by React
                uses onChange tag to update state 
                chnage of state triggers re-rendering, so updated state is visualised to user
                NB -> if you only use value tag and do not update the state with onChange, there will be no re-render for the user and input field will appear locked with the initially set value

                    function App() {
                        const [username, setUsername] = useState('');
                        
                        const submitHandler = (e) => {
                            e.preventDefault();
                            
                        }
                        const usernameChangeHandler = (e) => {
                            setUsername(e.target.value) // each change in browser DOM is reflected by updating the React state, so that we have a state of the browser DOM form on our own virtual DOM 
                        }
                        return (
                            <div className="App">
                                <header className="App-header">
                                    <form onSubmit={submitHandler}>
                                        <div>
                                            <label htmlFor="username">Username:</label>
                                            <input 
                                                id="username"
                                                type="text" 
                                                name="username"
                                                value={username} //value shift the controll over the form to React
                                                onChange={usernameChangeHandler} //onChange watches for each keystroke change in borwser DOM
                                            />
                                        </div>
                                        <div>
                                            <label htmlFor="password">Password:</label>
                                            <input id="password" type="password" name="password" />
                                        </div>
                                        <div>
                                            <input type="submit" value="Login" />
                                        </div>
                                    </form>
                                </header>
                            </div>
                        );
                    }





Side notes:
    two types of submit buttons:
        <input type="submit" value="Login" /> -
        <button type="submit">Login</button> - in form by default type is submit, outside form by default type is button


3:10:35

    Checkbox
    by default checked tag on input type="checkbox" button will:
        if checked by user return tac = 'on' in state
        if unchecked by yser return '' in state (empty field)
            <div>
                <label htmlFor="tac">Terms and Conditions:</label>
                <input type="checkbox" name="tac" id="tac" checked={values.tac} onChange={changeHandler}/>
            </div>


    Radio
    on input type="radio" button we need to preselect one radio VIA state and checked tag that reflects on that state:
            <div>
                <label htmlFor="individual-user-type">Individual:</label>
                <input type="radio" name="userType" value="individual" id="individual-user-type" onChange={changeHandler} checked={values.userType == 'individual'} />
                <label htmlFor="corporate-user-type">Corporate:</label>
                <input type="radio" name="userType" value="corporate" id="corporate-user-type" onChange={changeHandler} checked={values.userType == 'corporate'}/>
            </div>
        NB -> each radio has a value that is set in the component element itself (value='individual') 
              onChange tag sets new state coming from e.target.value
              checked tag sets the check on the DOM element by comparing with state
              With Radio The Value That Is In State Comes From The Value Hardcoded In Value Tag
              BECAUSE we want to differenatiate what to show depending on individual or corporate EGN or EIK

    Select/Option
    on select/options button we can have pre-selected VIA setting such state:
            <div>
                <label htmlFor="gender">Gender:</label>
                <select name="gender" id="gender" value={values.gender} onChange={changeHandler}>
                    <option value="m">Male</option>
                    <option value="f">Female</option>
                </select>
            </div>

