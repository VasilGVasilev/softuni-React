DOM is updated HTML via javascript script
    If you look at the DOM elements inside your browser developer tools, 
    you will notice the DOM includes the <h1> element. 
    The DOM of the page is different from the source code - or in other words, 
    the original HTML file you created.
    This is because the HTML represents the initial page content, 
    whereas the DOM represents the updated page content which was changed 
    by the JavaScript code you wrote.

    the JS code:
    <!-- index.html -->
    <script type="text/javascript">
    const app = document.getElementById('app');
    const header = document.createElement('h1');
    const headerContent = document.createTextNode('Develop. Preview. Ship. ðŸš€');
    header.appendChild(headerContent);
    app.appendChild(header);
    </script>

That above is imperative programming.
Imperative programming is like giving a chef step-by-step instructions on how to make a pizza.
Declarative programming is like ordering a pizza without being concerned about the steps it takes to make the pizza. 

    <html>
    <body>
        <div id="app"></div>

        <script src="https://unpkg.com/react@17/umd/react.development.js"></script>
        <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"></script>

        <script type="text/javascript">
        const app = document.getElementById('app');
        ReactDOM.render(<h1>Develop. Preview. Ship. ðŸš€</h1>, app);
        </script>
    </body>
    </html>

But if you try to run this code in the browser, you will get a syntax error
Note that browsers donâ€™t understand JSX out of the box, so youâ€™ll need a JavaScript compiler, such as a Babel, to transform your JSX code into regular JavaScript.

React has three core concepts:    Components Props State

In React, components are functions (capitalized and with angle brackets <>): 

    <script type="text/jsx">

    const app = document.getElementById("app")

    function Header() {
        return (<h1>Develop. Preview. Ship. ðŸš€</h1>) //A component is a function that returns UI elements. Inside the return statement of the function, you can write JSX
    }


    ReactDOM.render(<Header />, app)
    </script>

Nesting:
 
    function Header() {
        return <h1>Develop. Preview. Ship. ðŸš€</h1>; //directly return without ()
    }

    function HomePage() {
        return (
            <div>
            <Header /> //good practice is nesting the components
            </div>
        );
    }

    ReactDOM.render(<HomePage />, app);

Props - like attributes for HTML elements
    -> Similar to a JavaScript function, you can design components that accept custom arguments 
    (or props) that change the componentâ€™s behavior (state can be passed as props, too - from parent to child component)

-> see /props, notice little lag when rendering title

You can think of curly braces as a way to enter "JavaScript land" while you are in "JSX land".

An object property with dot notation.

    function Header(props) {
    return <h1>{props.title}</h1>;
    }

A template literal:

    function Header({ title }) {
    return <h1>{`Cool ${title}`}</h1>;
    }

The returned value of a function.

    function createTitle(title) {
    if (title) {
        return title;
    } else {
        return 'Default title';
    }
    }

    function Header({ title }) {
    return <h1>{createTitle(title)}</h1>;
    }

Or ternary operators.

    function Header({ title }) {
    return <h1>{title ? title : 'Default Title'}</h1>;
    }



Iterating through lists:

    function HomePage() {
    const names = ['Ada Lovelace', 'Grace Hopper', 'Margaret Hamilton'];

    return (
        <div>
        <Header title="Develop. Preview. Ship. ðŸš€" />
        <ul>
            {names.map((name) => (
            <li>{name}</li>
            ))}
        </ul>
        </div>
    );
    }

BUT - If you run this code, React will give us a warning about a missing key prop. 
This is because React needs something to uniquely identify items in an array 
so it knows which elements to update in the DOM.

function HomePage() {
  const names = ['Ada Lovelace', 'Grace Hopper', 'Margaret Hamilton'];

  return (
    <div>
      <Header title="Develop. Preview. Ship. ðŸš€" />
      <ul>
        {names.map((name) => (
          <li key={name}>{name}</li> // better use itemId in practice
        ))}
      </ul>
    </div>
  );
}

State
see /state


You can use state to store and increment the number of times a user has clicked the like button. 
In fact, this is what the React hook to manage state is called: useState()

    function HomePage() {
    const [likes, setLikes] = React.useState(0);
    }
first arg is state value, second arg is function to update value, (0) denotes the initial value

state variable is set, thus, you can use it, see how we add it in /state/index.html:
    <button onClick={handleClick}>Like({likes})</button> 

this whole logic reminds me of closures, likes is top-level var for current component, and is used via 'entering JS land', the same is for the handling function, with one nesting hendleClick(){setLikes()} 