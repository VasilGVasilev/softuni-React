EVENT HANDLING:
    
    React events are named using camelCase, rather than lowercase.
    You must call preventDefault explicitly.
    React events do not work exactly the same as native events. See the SyntheticEvent reference guide to learn more.
    No need to addEventListener to a newy created DOM element, just add a listener function:

        class Toggle extends React.Component {
            constructor(props) {
                super(props);
                this.state = {isToggleOn: true};

                // In JavaScript, class methods are not bound by default. this will be undefined when the function is actually called if not explcicitly not bound
                this.handleClick = this.handleClick.bind(this);  
            }

            handleClick() {    
                this.setState(prevState => ({      prevState holds is the value of state before the setState was triggered by React; 
                    isToggleOn: !prevState.isToggleOn    //Since setState does batching, its sometimes important to know what the previous state was 
                }));   //when you want to update the new state based on the previous state value.
            }

            render() {
                return (
                    <button onClick={this.handleClick}>        
                        {this.state.isToggleOn ? 'ON' : 'OFF'}
                </button>
                );
            }
        }
    
    Instead of explicitly bidning this to this.handleClick, you can use public class fields syntax:
    - handleClick function is made into an arrow funciton:
        handleClick = () => {    
            this.setState(prevState => ({      
                isToggleOn: !prevState.isToggleOn    
            }));   
        }
    - handleClick callback is made into an arrow function:
        <button onClick={() => this.handleClick()}>

    PROBLEM: The problem with this syntax is that a different callback is created each time the LoggingButton renders.



CONDITIONAL RENDERING:

        class LoginControl extends React.Component {
            constructor(props) {
                super(props);
                this.handleLoginClick = this.handleLoginClick.bind(this);
                this.handleLogoutClick = this.handleLogoutClick.bind(this);
                this.state = {isLoggedIn: false};
            }

            handleLoginClick() {
                this.setState({isLoggedIn: true});
            }

            handleLogoutClick() {
                this.setState({isLoggedIn: false});
            }

            render() {
                const isLoggedIn = this.state.isLoggedIn;
                let button;
                if (isLoggedIn) {      
                    button = <LogoutButton onClick={this.handleLogoutClick} />;    
                } else {      
                    button = <LoginButton onClick={this.handleLoginClick} />;    
                }
                return (
                    <div>
                        <Greeting isLoggedIn={isLoggedIn} />        
                        {button}      
                    </div>
                );
            }
        }

    const root = ReactDOM.createRoot(document.getElementById('root')); 
    root.render(<LoginControl />);

    shorter sytnax trick in React:
    - In JavaScript, true && expression always evaluates to expression, and false && expression always evaluates to false.

        function Mailbox(props) {
        const unreadMessages = props.unreadMessages;
        return (
            <div>
            <h1>Hello!</h1>
            {unreadMessages.length > 0 &&        
                <h2>          
                    You have {unreadMessages.length} unread messages.        
                </h2>      
            }    
            </div>
        );
        }

        const messages = ['React', 'Re: React', 'Re:Re: React'];

        const root = ReactDOM.createRoot(document.getElementById('root')); 
        root.render(<Mailbox unreadMessages={messages} />);
    NB note that if false, element will be skipped but it qill still return falsy expressio

    - ternary operator

        render() {
        const isLoggedIn = this.state.isLoggedIn;
        return (
                <div>
                    The user is <b>{isLoggedIn ? 'currently' : 'not'}</b> logged in.    
                </div>
            );
        }

    - Returning null from a component’s render method does not affect the firing of the component’s lifecycle methods. For instance componentDidUpdate will still be called.


LISTS AND KEYS
    
    - elements inside the map() call need keys
    - Keys used within arrays should be unique among their siblings. However, they don’t need to be globally unique. 

FORMS
    - Controlled components handle the submission of the form and have access to the data that the user entered into the form

        With a controlled component, the input’s value is always driven by the React state. 

            class NameForm extends React.Component {
                constructor(props) {
                    super(props);
                    this.state = {value: ''};
                    this.handleChange = this.handleChange.bind(this);
                    this.handleSubmit = this.handleSubmit.bind(this);
                }

                handleChange(event) {    
                    this.setState({value: event.target.value});  
                    }

                handleSubmit(event) {
                    alert('A name was submitted: ' + this.state.value);
                    event.preventDefault();
                }

                render() {
                    return (
                    <form onSubmit={this.handleSubmit}>        
                        <label>
                            Name:
                            <input type="text" value={this.state.value} onChange={this.handleChange} />        
                        </label>
                        <input type="submit" value="Submit" />
                    </form>
                    );
                }
            }
        
        why we take the value via event.target.value -> target is always attached to the element that addEventListener is attached to
        Remember that NameForm is actually sort of a virtual element that using like a robotic hand to manipulate actual DOM, thus, 
        you have a seperate state, you say render this separate state, stored in my script:
            <input type="text" value={this.state.value} onChange={this.handleChange} />  
        and this rendering sort of makes the template and sends it to be diplayed to the client
        then we use script to snoop for changes -> onChange; here we need to adhere to the DOM rules, so we use event.target to extract value 

        NB handleChange runs on every keystroke to update the React state, the displayed value will update as the user types

    - textarea 

        In HTML, a <textarea> element defines its text by its children:

            <textarea>
                Hello there, this is some text in a text area
            </textarea>

        In React, a <textarea> uses a value attribute instead. This way, a form using a <textarea> can be written very similarly to a form that uses a single-line input

    - select target
        React, instead of using this selected attribute, uses a value attribute on the root select tag.
        class FlavorForm extends React.Component {
            constructor(props) {
                super(props);
                this.state = {value: 'coconut'};
                this.handleChange = this.handleChange.bind(this);
                this.handleSubmit = this.handleSubmit.bind(this);
            }

            handleChange(event) {    
                this.setState({value: event.target.value});  
            }

            handleSubmit(event) {
                alert('Your favorite flavor is: ' + this.state.value);
                event.preventDefault();
            }

            render() {
                return (
                <form onSubmit={this.handleSubmit}>
                    <label>
                    Pick your favorite flavor:
                    <select value={this.state.value} onChange={this.handleChange}>            // <----------
                        <option value="grapefruit">Grapefruit</option>
                        <option value="lime">Lime</option>
                        <option value="coconut">Coconut</option>
                        <option value="mango">Mango</option>
                    </select>
                    </label>
                    <input type="submit" value="Submit" />
                </form>
                );
            }
        }

        You can pass an array into the value attribute, allowing you to select multiple options in a select tag:
            <select multiple={true} value={['B', 'C']}>

        Other solutions:
            - there are uncontrolled components too    
                It can sometimes be tedious to use controlled components, because you need to write an event handler for every 
                way your data can change and pipe all of the input state through a React component. This can become particularly 
                annoying when you are converting a preexisting codebase to React, or integrating a React application with a 
                non-React library. In these situations, you might want to check out uncontrolled components, an alternative 
                technique for implementing input forms.

           - Formik
                If you’re looking for a complete solution including validation, keeping track of the visited fields, and handling form submission, 
                Formik is one of the popular choices. 

SHARING STATE
    In React, sharing state is accomplished by moving it up to the closest common ancestor of the components that need it. This is called “lifting state up”.
    see TempConvert; Calculator State is the parent state, which is passed onto children, it's like a markup/template
    to use in TemperatureInput components to be displayed, in reality, all calc happen in Calculator via tryConvert
    this.handleChange -> this.props.onTemperatureChange(e.target.value) -> onTemperatureChange={this.handleCelsiusChange} /> -> handleCelsiusChange(temperature) {this.setState({scale: 'c', temperature});}

    Instead of trying to sync the state between different components, you should rely on the top-down data flow.

ONE SOURCE OF TRUTH TO RULE THEM ALLWe recommend that such components use the special children prop to pass children elements directly into their output:

    function FancyBorder(props) {
            return (
                <div className={'FancyBorder FancyBorder-' + props.color}>
                    {props.children}                    <----------
                </div>
            );
        }

    This lets other components pass arbitrary children to them by nesting the JSX:

    function WelcomeDialog() {
    return (
        <FancyBorder color="blue">
        <h1 className="Dialog-title">                   <----------
            Welcome                                     <----------
        </h1>                                           <----------
        <p className="Dialog-message">                  <----------
            Thank you for visiting our spacecraft!      <----------
        </p>                                            <----------
        </FancyBorder>
    );