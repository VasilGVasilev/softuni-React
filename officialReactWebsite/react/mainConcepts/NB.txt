INTRO JSX

Babel compiles JSX down to React.createElement() calls.

    const element = (
    <h1 className="greeting">
        Hello, world!
    </h1>
    );

    is Identical to:

    const element = React.createElement(
    'h1',
    {className: 'greeting'},
    'Hello, world!'
    );

BABEL creates this,  Note: this structure is simplified:

    const element = {
    type: 'h1',
    props: {
        className: 'greeting',
        children: 'Hello, world!'
        }
    };
here props are both className and children, but it is not the same as passing in props in component as an argument from NextJsTutorial/props/index.html

RENDERING ELEMENTS
Elements are what components are “made of”, and we encourage you to read this section before jumping ahead.
-> element -> const element = <h1>Hello, world</h1>;


Applications built with just React usually have a single root DOM node. 
-> <div id="root"></div>

React v18 way 

    const root = ReactDOM.createRoot(document.getElementById('root'));
    const element = <h1>Hello, world</h1>;
    root.render(element);

React elements are immutable, it is like a single frame in a movie: it represents the UI at a certain point in time.

INSTEAD of updating the UI by creating a new element and passing it to root.render() every time (ticking timer),
React makes use of code encapsulation into stateful components, also React DOM only updates what is necessary

COMPONENTS AND PROPS 

    function Welcome(props) {  
        return <h1>Hello, {props.name}</h1>;
    }
    const root = ReactDOM.createRoot(document.getElementById('root'));
    const element = <Welcome name="Sara" />;
    root.render(element);


1) We call root.render() with the <Welcome name="Sara" /> element.
2) React calls the Welcome component with {name: 'Sara'} as the props.
3) Our Welcome component returns a <h1>Hello, Sara</h1> element as the result.
4) React DOM efficiently updates the DOM to match <h1>Hello, Sara</h1>.

Whether you declare a component as a function or a class, it must never modify its own props,
namely, be pure functions:
Pure: 
    function sum(a, b) {
    return a + b;
    }
Impure:
    function withdraw(account, amount) {
    account.total -= amount;
    }
Impure functions change their inputs
!!! All React components must act like pure functions with respect to their props. !!!

Only state  allows React components to change their output over time in response to user actions, network responses, and anything else, without violating this rule.

STATE AND LIFECYCLE

State is similar to props, but it is private and fully controlled by the component.

