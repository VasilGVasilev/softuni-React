INTRO JSX

Babel compiles JSX down to React.createElement() calls.

    const element = (
    <h1 className="greeting">
        Hello, world!
    </h1>
    );

    is Identical to:

    const element = React.createElement(
    'h1',
    {className: 'greeting'},
    'Hello, world!'
    );

BABEL creates this,  Note: this structure is simplified:

    const element = {
    type: 'h1',
    props: {
        className: 'greeting',
        children: 'Hello, world!'
        }
    };
here props are both className and children, but it is not the same as passing in props in component as an argument from NextJsTutorial/props/index.html

RENDERING ELEMENTS
Elements are what components are “made of”, and we encourage you to read this section before jumping ahead.
-> element -> const element = <h1>Hello, world</h1>;


Applications built with just React usually have a single root DOM node. 
-> <div id="root"></div>

React v18 way 

    const root = ReactDOM.createRoot(document.getElementById('root'));
    const element = <h1>Hello, world</h1>;
    root.render(element);

React elements are immutable, it is like a single frame in a movie: it represents the UI at a certain point in time.

INSTEAD of updating the UI by creating a new element and passing it to root.render() every time (ticking timer),
React makes use of code encapsulation into stateful components, also React DOM only updates what is necessary







COMPONENTS AND PROPS 

    function Welcome(props) {  
        return <h1>Hello, {props.name}</h1>;
    }
    const root = ReactDOM.createRoot(document.getElementById('root'));
    const element = <Welcome name="Sara" />;
    root.render(element);


1) We call root.render() with the <Welcome name="Sara" /> element.
2) React calls the Welcome component with {name: 'Sara'} as the props.
3) Our Welcome component returns a <h1>Hello, Sara</h1> element as the result.
4) React DOM efficiently updates the DOM to match <h1>Hello, Sara</h1>.

Whether you declare a component as a function or a class, it must never modify its own props,
namely, be pure functions:
Pure: 
    function sum(a, b) {
    return a + b;
    }
Impure:
    function withdraw(account, amount) {
    account.total -= amount;
    }
Impure functions change their inputs
!!! All React components must act like pure functions with respect to their props. !!!

Only state  allows React components to change their output over time in response to user actions, network responses, and anything else, without violating this rule.





STATE AND LIFECYCLE

State is similar to props, but it is private and fully controlled by the component.

Transform this using state: 

    const root = ReactDOM.createRoot(document.getElementById('root'));

    function Clock(props) {
        return (
            <div>      
            <h1>Hello, world!</h1>      
            <h2>It is {props.date.toLocaleTimeString()}.</h2>    
            </div>  
            );
    }

    function tick() {
        root.render(<Clock date={new Date()} />);
    }

    setInterval(tick, 1000);

Convert function into class: (Components defined as classes currently provide more features) 

    1) Create an ES6 class, with the same name, that extends React.Component.
    2) Add a single empty method to it called render().
    3) Move the body of the function into the render() method.
    4) Replace props with this.props in the render() body.
    5) Delete the remaining empty function declaration.
    6) Replace this.props.date with this.state.date
    7) Add class constructor that assigns the inital this.state
    8) Remove the date prop from the <Clock /> element
    --- Adding lifecycle method to class


    class Clock extends React.Component {
        constructor(props){
            super(props);
            this.state = {date: new Date()}
        }

        render() {
            return (
                <div>
                    <h1>Hello, world!</h1>
                    <h2>It is {this.state.date.toLocaleTimeString()}.</h2>
                </div>
                );
            }
        }

    const root = ReactDOM.createRoot(document.getElementById('root'));
    root.render(<Clock />);


Adding lifecycle method to class:


    class Clock extends React.Component {
        constructor(props){
            super(props);
            this.state = {date: new Date()}
        }

        
        componentDidMount() {
            this.timerID = setInterval(
            () => this.tick(),
            1000
            );
        }

        componentWillUnmount() {
            clearInterval(this.timerID);
        }

        tick() {    
            this.setState({      
                date: new Date()    
            });  
        }

        render() {
            return (
                <div>
                    <h1>Hello, world!</h1>
                    <h2>It is {this.state.date.toLocaleTimeString()}.</h2>
                </div>
                );
            }
        }

    const root = ReactDOM.createRoot(document.getElementById('root'));
    root.render(<Clock />);

    React First renders the initial time and then mounts a ticking function that rerenders the updated time

    1) When <Clock /> is passed to root.render(), React calls the constructor of the Clock component. 
    Since Clock needs to display the current time, it initializes this.state with an object including the current time. 

    2) React then calls the Clock component’s render() method. This is how React learns what should be displayed on the screen. 
    React then updates the DOM to match the Clock’s render output. 

    3) When the Clock output is inserted in the DOM, React calls the componentDidMount() lifecycle method. 
    Inside it, the Clock component asks the browser to set up a timer to call the component’s tick() method once a second.

    4) Every second the browser calls the tick() method. Inside it, the Clock component schedules a UI update 
    by calling setState() with an object containing the current time. Thanks to the setState() call, 
    React knows the state has changed, and calls the render() method again to learn what should be on the screen. 
    This time, this.state.date in the render() method will be different, 
    and so the render output will include the updated time. React updates the DOM accordingly.

    5) If the Clock component is ever removed from the DOM, React calls the componentWillUnmount() lifecycle method 
    so the timer is stopped.
